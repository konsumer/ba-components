import { getColor } from './utils'
import Component from './BAComponent'

export default class BaScene extends Component {
  acceptedProps = [
    'actionManager',
    'actionManagers',
    'activeBonesPerfCounter',
    'activeCamera',
    'activeCameras',
    'activeParticlesPerfCounter',
    'afterCameraRender',
    'afterRender',
    'ambientColor',
    'animatables',
    'animationGroups',
    'animationPropertiesOverride',
    'animationTimeScale',
    'animations',
    'animationsEnabled',
    'audioEnabled',
    'autoClear',
    'autoClearDepthAndStencil',
    'beforeCameraRender',
    'beforeRender',
    'blockMaterialDirtyMechanism',
    'cameraToUseForPointers',
    'cameras',
    'clearColor',
    'clipPlane',
    'clipPlane2',
    'clipPlane3',
    'clipPlane4',
    'collisionsEnabled',
    'constantlyUpdateMeshUnderPointer',
    'customRenderTargets',
    'debugLayer',
    'defaultCursor',
    'defaultMaterial',
    'disableOfflineSupportExceptionRules',
    'dispatchAllSubMeshesOfActiveMeshes',
    'dumpNextRenderTargets',
    'effectLayers',
    'environmentTexture',
    'fogColor',
    'fogDensity',
    'fogEnabled',
    'fogEnd',
    'fogMode',
    'fogStart',
    'forcePointsCloud',
    'forceShowBoundingBoxes',
    'forceWireframe',
    'frustumPlanes',
    'gamepadManager',
    'geometries',
    'geometryBufferRenderer',
    'getActiveMeshCandidates',
    'getActiveSubMeshCandidates',
    'getCollidingSubMeshCandidates',
    'getDeterministicFrameTime',
    'getIntersectingSubMeshCandidates',
    'gravity',
    'headphone',
    'hoverCursor',
    'imageProcessingConfiguration',
    'importedMeshesFiles',
    'isDisposed',
    'isLoading',
    'layers',
    'lensFlareSystems',
    'lensFlaresEnabled',
    'lights',
    'lightsEnabled',
    'loadingPluginName',
    'mainSoundTrack',
    'materials',
    'meshUnderPointer',
    'meshes',
    'metadata',
    'morphTargetManagers',
    'multiMaterials',
    'onAfterActiveMeshesEvaluationObservable',
    'onAfterAnimationsObservable',
    'onAfterCameraRenderObservable',
    'onAfterDrawPhaseObservable',
    'onAfterParticlesRenderingObservable',
    'onAfterPhysicsObservable',
    'onAfterRenderObservable',
    'onAfterRenderTargetsRenderObservable',
    'onAfterRenderingGroupObservable',
    'onAfterSpritesRenderingObservable',
    'onAfterStepObservable',
    'onBeforeActiveMeshesEvaluationObservable',
    'onBeforeAnimationsObservable',
    'onBeforeCameraRenderObservable',
    'onBeforeDrawPhaseObservable',
    'onBeforeParticlesRenderingObservable',
    'onBeforePhysicsObservable',
    'onBeforeRenderObservable',
    'onBeforeRenderTargetsRenderObservable',
    'onBeforeRenderingGroupObservable',
    'onBeforeSpritesRenderingObservable',
    'onBeforeStepObservable',
    'onCameraRemovedObservable',
    'onDataLoadedObservable',
    'onDispose',
    'onDisposeObservable',
    'onGeometryRemovedObservable',
    'onKeyboardObservable',
    'onLightRemovedObservable',
    'onMaterialRemovedObservable',
    'onMeshImportedObservable',
    'onMeshRemovedObservable',
    'onNewCameraAddedObservable',
    'onNewGeometryAddedObservable',
    'onNewLightAddedObservable',
    'onNewMaterialAddedObservable',
    'onNewMeshAddedObservable',
    'onNewTextureAddedObservable',
    'onNewTransformNodeAddedObservable',
    'onPointerDown',
    'onPointerMove',
    'onPointerObservable',
    'onPointerPick',
    'onPointerUp',
    'onPreKeyboardObservable',
    'onPrePointerObservable',
    'onReadyObservable',
    'onTextureRemovedObservable',
    'onTransformNodeRemovedObservable',
    'particleSystems',
    'particlesEnabled',
    'pointerDownPredicate',
    'pointerMovePredicate',
    'pointerUpPredicate',
    'pointerX',
    'pointerY',
    'postProcessManager',
    'postProcessRenderPipelineManager',
    'postProcesses',
    'postProcessesEnabled',
    'preventDefaultOnPointerDown',
    'probesEnabled',
    'proceduralTextures',
    'proceduralTexturesEnabled',
    'reflectionProbes',
    'renderTargetsEnabled',
    'requireLightSorting',
    'rootNodes',
    'selectionOctree',
    'shadowsEnabled',
    'simplificationQueue',
    'skeletons',
    'skeletonsEnabled',
    'soundTracks',
    'sounds',
    'spriteManagers',
    'spritesEnabled',
    'textures',
    'texturesEnabled',
    'totalActiveIndicesPerfCounter',
    'totalVerticesPerfCounter',
    'transformNodes',
    'uid',
    'unTranslatedPointer',
    'useConstantAnimationDeltaTime',
    'useDelayedTextureLoading',
    'useRightHandedSystem',
    'workerCollisions'
  ]

  render () {
    const scene = new BABYLON.Scene(this.context.engine)
    this.contextAdditions.scene = scene
    Object.keys(this.props).forEach(p => {
      // handle color props
      if (p.toLowerCase().indexOf('color') !== -1) {
        this.props[p] = getColor(this.props[p])
      }
      scene[p] = this.props[p]
    })
  }
}

window.customElements.define('ba-scene', BaScene)